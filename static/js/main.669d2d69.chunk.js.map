{"version":3,"sources":["assets/twitter-logo.svg","App.tsx","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAccount","setCurrentAccount","askContractToMintNft","CONTRACT_ADDRESS","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","on","from","tokenId","console","log","toNumber","alert","makeAnEpicNFT","nftTxn","wait","hash","checkIfWalletIsConnected","request","method","chainId","accounts","length","account","connectWallet","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+lmEAAe,G,MAAA,IAA0B,0C,uBCOnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GA2I7BE,EAvIH,WACV,MAA4CC,mBAAS,IAAG,mBAAjDC,EAAc,KAAEC,EAAiB,KAClCC,EAAoB,iDAAG,0GAIT,GAHZC,EAAmB,6CAA6C,EAAD,SAG9CC,SAAbC,EAAQ,EAARA,UAEK,CAAD,gBAU0C,OAT9CC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,aAClBC,EAAoB,IAAIL,IAAOM,SAASV,EAAkBW,EAAUC,IAAKL,IAE7DM,GAAG,oBAAoB,SAACC,EAAMC,GAC9CC,QAAQC,IAAIH,EAAMC,EAAQG,YAC1BC,MAAM,+KAAD,OAAgLnB,EAAgB,YAAIe,EAAQG,WAAU,KAC7N,IAEAF,QAAQC,IAAI,yCAAwC,UACjCR,EAAkBW,gBAAgB,KAAD,GAEhB,OAFhCC,EAAM,OAEVL,QAAQC,IAAI,yBAAwB,UAC9BI,EAAOC,OAAO,KAAD,GAEnBN,QAAQC,IAAI,0DAAD,OAA2DI,EAAOE,OAAQ,wBAGrFP,QAAQC,IAAI,kCAAkC,0DAGhDD,QAAQC,IAAI,EAAD,IAAO,0DAErB,kBA9ByB,mCAgCpBO,EAAwB,iDAAG,sGACf,OADe,EACVvB,OAAbC,EAAQ,EAARA,SAAQ,SAEIA,EAASuB,QAAQ,CAAEC,OAAQ,gBAAiB,KAAD,EAO9D,GAPGC,EAAO,OACXX,QAAQC,IAAI,sBAAwBU,GAGd,cAClBA,GACFR,MAAM,qDAGHjB,EAAS,CAAD,gBACiC,OAA5Cc,QAAQC,IAAI,gCAAgC,2BAG5CD,QAAQC,IAAI,8BAA+Bf,GAAU,yBAGhCA,EAASuB,QAAQ,CAAEC,OAAQ,iBAAkB,KAAD,GAE3C,KAFlBE,EAAQ,QAEDC,QACLC,EAAUF,EAAS,GACzBZ,QAAQC,IAAI,+BAAgCa,GAC5ChC,EAAkBgC,IAElBd,QAAQC,IAAI,+BACb,4CACF,kBA5B6B,mCAiCxBc,EAAa,iDAAG,kGAEF,GAFE,WAEG9B,OAAbC,EAAQ,EAARA,SAEM,CAAD,eACY,OAAvBiB,MAAM,iBAAiB,0CAOFjB,EAASuB,QAAQ,CAAEC,OAAQ,wBAAyB,KAAD,EAApEE,EAAQ,OAKdZ,QAAQC,IAAI,YAAaW,EAAS,IAClC9B,EAAkB8B,EAAS,IAAI,kDAE/BZ,QAAQC,IAAI,EAAD,IAAQ,0DAEtB,kBAtBkB,mCAsCnB,OAPAe,qBAAU,WACRR,GACF,GAAG,IAMD,qBAAKS,UAAU,MAAK,SAClB,sBAAKA,UAAU,YAAW,UACxB,sBAAKA,UAAU,mBAAkB,UAC/B,mBAAGA,UAAU,uBAAsB,+BACnC,mBAAGA,UAAU,WAAU,mEAGH,KAAnBpC,EApBP,wBAAQqC,QAASH,EAAeE,UAAU,mCAAkC,+BAuBpE,wBAAQC,QAASnC,EAAsBkC,UAAU,mCAAkC,yBAKvF,sBAAKA,UAAU,mBAAkB,UAC/B,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAM5C,EACN6C,OAAO,SACPC,IAAI,aAAY,6BACH/C,YAKzB,EC5IAgD,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.669d2d69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\n\nimport myEpicNft from './utils/MyEpicNFT.json';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x21374f36ed9cb003aEC60F92540f41b59E7aE345\";\n  \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n  \n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/goerli/${CONTRACT_ADDRESS}/${tokenId.toNumber()}>`)\n        });\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n  \n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Rinkebey test network\n    const goerliChainId = \"0x5\"; \n    if (chainId !== goerliChainId) {\n      alert(\"You are not connected to the Goerli Test Network!\");\n    }\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}